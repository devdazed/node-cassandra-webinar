{
  "name": "helenus",
  "version": "0.6.0",
  "description": "NodeJS Bindings for Cassandra",
  "keywords": [
    "cassandra"
  ],
  "author": {
    "name": "Russell Bradberry",
    "email": "rbradberry@gmail.com"
  },
  "contributors": [
    {
      "name": "Christoph Tavan",
      "email": "dev@tavan.de"
    },
    {
      "name": "Calvin French-Owen",
      "email": "calvin@segment.io"
    }
  ],
  "homepage": "https://github.com/simplereach/helenus",
  "repository": {
    "url": "git://github.com/simplereach/helenus.git"
  },
  "dependencies": {
    "helenus-thrift": "0.7.3",
    "node-uuid": "1.3.3"
  },
  "devDependencies": {
    "whiskey": "git://github.com/cloudkick/whiskey.git#b3c5bc23e30c95e46083bc7628c2557c1c15ec95",
    "JSDoc": "git://github.com/jsdoc3/jsdoc.git"
  },
  "scripts": {
    "test": "make test"
  },
  "main": "index",
  "engines": {
    "node": ">=0.6.0 <0.9.0"
  },
  "readme": "# Helenus\n\n  NodeJS Bindings for Cassandra\n\n  Currently the driver has full CQL support and a growing support for thrift (non-cql) commands.\n  If you would like to contribute, please contact Russ Bradberry &lt;rbradberry@simplereach.com&gt;\n\n  If you have any questions regarding the driver, please visit our [google group](https://groups.google.com/forum/?fromgroups#!forum/helenus)\n\n\n### Build Status\n\n  [![Build Status](https://secure.travis-ci.org/simplereach/helenus.png)](http://travis-ci.org/simplereach/helenus)\n\n## Installation\n\n    npm install helenus\n\n## Running Tests\n\n  Ensure cassandra is running on localhost:9160.\n\n    make test\n\n  For coverage\n\n    make test-cov\n\n## Usage\n\n## CQL\n\n```javascript\n  var helenus = require('helenus'),\n      pool = new helenus.ConnectionPool({\n        hosts      : ['localhost:9160'],\n        keyspace   : 'helenus_test',\n        user       : 'test',\n        password   : 'test1233',\n        timeout    : 3000\n        //cqlVersion : '3.0.0' // specify this if you're using Cassandra 1.1 and want to use CQL 3\n      });\n\n  //if you don't listen for error, it will bubble up to `process.uncaughtException`\n  //pools act just like connection objects, so you don't have to worry about api\n  //differences when using either the pool or the connection\n  pool.on('error', function(err){\n    console.error(err.name, err.message);\n  });\n\n  //makes a connection to the pool, this will return once there is at least one\n  //valid connection, other connections may still be pending\n  pool.connect(function(err, keyspace){\n    if(err){\n      throw(err);\n    } else {\n      //to use cql, access the pool object once connected\n      //the first argument is the CQL string, the second is an `Array` of items\n      //to interpolate into the format string, the last is the callback\n      //for formatting specific see `http://nodejs.org/docs/latest/api/util.html#util.format`\n      //results is an array of row objects\n\n      pool.cql(\"SELECT col FROM cf_one WHERE key = ?\", ['key123'], function(err, results){\n        console.log(err, results);\n      });\n\n      //NOTE:\n      //- You can always skip quotes around placeholders, they are added automatically.\n      //- In CQL 3 you cannot use placeholders for ColumnFamily names or Column names.\n    }\n  });\n```\n\n## Thrift\n\nIf you do not want to use CQL, you can make calls using the thrift driver\n\n```javascript\n  pool.connect(function(err, keyspace){\n    if(err){\n      throw(err);\n    }\n\n    //first retreive the column family from the server\n    //helenus will cache column families it has already seen\n    keyspace.get('my_cf', function(err, cf){\n      if(err){\n        throw(err);\n      }\n\n      //insert something into the column family\n      cf.insert('foo', {'bar':'baz'}, function(err){\n        if(err){\n          throw(err);\n        }\n\n        //get what we just put in\n        //the driver will return a helenus.Row object just like CQL\n        cf.get('foo', {consistency:helenus.ConsistencyLevel.ONE} function(err, row){\n          if(err){\n            throw(err);\n          }\n\n          row.get('bar').value // => baz\n        });\n      });\n    });\n\n  });\n```\n\n### Thrift Support\n\nCurrently Helenus supports the following command for the thrift side of the driver:\n\n  * connection.createKeyspace\n  * connection.dropKeyspace\n  * keyspace.createColumnFamily\n  * keyspace.dropColumnFamily\n  * columnFamily.insert\n  * columnFamily.get\n  * columnFamily.getIndexed\n  * columnFamily.remove\n  * columnFamily.truncate\n\nThe following support is going to be added in later releases:\n\n  * columnFamily.rowCount\n  * columnFamily.columnCount\n  * columnfamily.increment\n  * SuperColumns\n  * CounterColumns\n  * Better composite support\n\n## Row\n\nThe Helenus Row object acts like an array but contains some helper methods to\nmake your life a bit easier when dealing with dynamic columns in Cassandra\n\n### row.count\n\nReturns the number of columns in the row\n\n### row[N]\n\nThis will return the column at index N\n\n    results.forEach(function(row){\n      //gets the 5th column of each row\n      console.log(row[5]);\n    });\n\n### row.get(name)\n\nThis will return the column with a specific name\n\n    results.forEach(function(row){\n      //gets the column with the name 'foo' of each row\n      console.log(row.get('foo'));\n    });\n\n### row.forEach()\n\nThis is wrapper function of Array.forEach which return name,value,ts,ttl of column from row as callback params.\n\n    results.forEach(function(row){\n      //all row of result\n      row.forEach(function(name,value,ts,ttl){\n        //all column of row\n        console.log(name,value,ts,ttl);\n      });\n\n    });\n\n### row.slice(start, finish)\n\nSlices columns in the row based on their numeric index, this allows you to get\ncolumns x through y, it returns a Helenus row object of columns that match the slice.\n\n    results.forEach(function(row){\n      //gets the first 5 columns of each row\n      console.log(row.slice(0,5));\n    });\n\n### row.nameSlice(start, finish)\n\nSlices the columns based on part of their column name. returns a Helenus row of columns\nthat match the slice\n\n    results.forEach(function(row){\n      //gets all columns that start with a, b, c, or d\n      console.log(row.nameSlice('a','e'));\n    });\n\n## Column\n\nColumns are returned as objects with the following structure:\n\n```javascript\n  {\n    name: 'Foo',       //The column name\n    value: 'bar',      //The column value\n    timestamp: Date(), //The date object of the timestamp for the column\n    ttl: 123456        //The ttl (in milliseconds) for the columns\n  }\n```\n\n## ConsistencyLevel\n\nHelenus supports using a custom consistency level. By default, when using the thrift client reads and writes will both use `QUORUM`. When using the thrift driver, you simply pass a custom level in the options:\n\n```javascript\ncf.insert(key, values, {consistency : helenus.ConsistencyLevel.ANY}, callback);\n```\n\n\n## Contributors\n\n* Russell Bradberry - @devdazed\n* Matthias Eder - @matthiase\n* Christoph Tavan - @ctavan\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011 SimpleReach &lt;rbradberry@simplereach.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "_id": "helenus@0.6.0",
  "dist": {
    "shasum": "f5741247c6eb0c800049bdc145edf91c6fc30461"
  },
  "_from": "helenus@0.6.0"
}
